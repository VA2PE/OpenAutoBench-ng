@page "/test/motorola/quantar"
@using OpenAutoBench_ng.Communication.Radio.Motorola.Quantar
@using OpenAutoBench_ng.Communication.Radio
@using OpenAutoBench_ng.Communication.Instrument
@using OpenAutoBench_ng.OpenAutoBench
@using System.IO.Ports

<PageTitle>Quantar</PageTitle>

<h3>MotorolaQuantar</h3>

<p>Tune da Quantar</p>

<input type="checkbox" @bind="testParams.doRefoscTest" /> Tx: Reference Oscillator
    <br />
<input type="checkbox" @bind="testParams.doPowerTest" /> Tx: Power
    <br />
<input type="checkbox" @bind="testParams.doDeviationTest" /> Tx: Deviation
    <br />
<input type="checkbox" @bind="testParams.doRssiTest" /> Rx: RSSI
    <br />

<p>
    <label>
        Quantar Serial Port:
        <select @bind="QuantarSerialPort">
            @foreach (var port in ports)
            {
                <option value="@port"> @port </option>
            }
        </select>
    </label>
</p>


<button class="btn btn-success" @onclick="@OnConnect">Connect</button>

<button class="btn btn-primary" disabled=@NotConnected @onclick ="@OnAlnBegin">Begin Alignment</button>
<button class="btn btn-secondary" disabled=@NotConnected @onclick ="@OnTestBegin">Begin Test</button>

<br />

<pre><code>@((MarkupString)TestOutput)</code></pre>
@code {
    private string TestOutput = "Test output goes here...\n";
    private bool NotConnected = true;
    private string QuantarSerialPort = "";
    private string[] ports;
    public MotorolaQuantarTestParams testParams = new MotorolaQuantarTestParams();
    IBaseInstrument instrument = null;
    MotorolaQuantar radio = null;

    private async Task ConnectRadio()
    {
        try
        {
            updateOutput("Connecting to test set...");
            instrument = await MainLogic.CreateInstrument();
            updateOutput("Connected to " + await instrument.GetInfo());

        }
        catch (Exception e)
        {
            updateOutput("Connection to test set failed: " + e.ToString());
            return;
        }

        try
        {
            updateOutput("Connecting to radio...");
            radio = new MotorolaQuantar(QuantarSerialPort);
            await radio.Connect();
            updateOutput("Connected to " + radio.Name);
        }
        catch (Exception e)
        {
            updateOutput("Connection to repeater failed: " + e.ToString());
            return;
        }

        // allows tests to be run
        NotConnected = false;
    }

    private async Task OnConnect(MouseEventArgs mouseEventArgs)
    {
        clearOutput();

        await ConnectRadio();

        await Task.Delay(1000);

        await instrument.Disconnect();
        radio.Disconnect();

    }

    private async Task OnAlnBegin(MouseEventArgs mouseEventArgs)
    {
    //
    }

    private async Task OnTestBegin(MouseEventArgs mouseEventArgs)
    {
        clearOutput();
        DateTime startTime = DateTime.Now;

        updateOutput("Beginning tests at " + startTime.ToString("HH:mm:ss tt"));
        updateOutput("=====================================");

        await ConnectRadio();

        testParams.instrument = instrument;
        testParams.callback = updateOutput;
        testParams.radio = radio;
        try
        {
            await radio.PerformTests(testParams);
        }
        catch (Exception e)
        {
            updateOutput(String.Format("Error when testing: {0}", e.ToString()));
        }
        finally
        {
            radio.Disconnect();
            await instrument.Disconnect();
        }
        

        DateTime endTime = DateTime.Now;
        updateOutput("Completed tests at " + endTime.ToString("HH:mm:ss tt"));
        TimeSpan timeDiff = endTime.Subtract(startTime);
        updateOutput("Done in " + timeDiff.ToString(@"hh\:mm\:ss"));
    }

    public void updateOutput(string line)
    {
        TestOutput += line + "<br>";
        InvokeAsync(StateHasChanged);
    }

    public void clearOutput()
    {
        TestOutput = "";
        InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        ports = SerialPort.GetPortNames();
    }
}
